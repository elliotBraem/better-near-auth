# Sign In With NEAR (SIWN)

Sign in with NEAR plugin for Better Auth

***

title: Sign In With NEAR (SIWN)
description: Sign in with NEAR plugin for Better Auth
---------------------------------------------------------

The Sign in with NEAR (SIWN) plugin allows users to authenticate using their NEAR wallets following the [NEP-413 standard](https://github.com/near/NEPs/blob/master/neps/nep-0413.md). This plugin provides a complete drop-in solution with secure defaults.

## Installation

<Steps>
  <Step>
    ### Add the Server Plugin

    Add the SIWN plugin to your auth configuration:

    ```ts title="auth.ts"
    import { betterAuth } from "better-auth";
    import { siwn } from "better-near-auth";
    import { generateNonce } from "near-sign-verify";

    export const auth = betterAuth({
        plugins: [
            siwn({
                domain: "example.com",
                getNonce: async () => {
                    return generateNonce(); // or whatever you want
                },
            }),
        ],
    });
    ```
  </Step>

  <Step>
    ### Migrate the database

    Run the migration to add the necessary fields and tables to the database.

    <Tabs items={["migrate", "generate"]}>
      <Tab value="migrate">
        ```bash
        npx @better-auth/cli migrate
        ```
      </Tab>

      <Tab value="generate">
        ```bash
        npx @better-auth/cli generate
        ```
      </Tab>
    </Tabs>

    See the [Schema](#schema) section to add the fields manually.
  </Step>

  <Step>
    ### Add the Client Plugin

    ```ts title="auth-client.ts"
    import { createAuthClient } from "better-auth/client";
    import { siwnClient } from "better-near-auth/client";

    export const authClient = createAuthClient({
        plugins: [siwnClient({
            domain: "example.com", // Domain must match server plugin
            signer: nearWallet, // Your NEAR wallet/signer instance
        })],
    });
    ```
  </Step>

  <Step>
    ### Install Wallet Dependencies

    ```bash
    npm install fastintear
    ```
  </Step>
</Steps>

## Usage

### One-Line Authentication

The simplest way to authenticate with NEAR:

```ts title="simple-auth.ts"
const { data, error } = await authClient.signIn.near();

if (data) {
  console.log("Signed in successfully:", data.user);
}
```

### React Component

```tsx title="components/LoginButton.tsx"
import { authClient } from "../lib/auth-client";

export function LoginButton() {
  const { data: session } = authClient.useSession();
  
  if (session) {
    return (
      <div>
        <p>Welcome, {session.user.name}!</p>
        <button onClick={() => authClient.signOut()}>Sign out</button>
      </div>
    );
  }

  return (
    <button onClick={() => authClient.signIn.near()}>
      Sign in with NEAR
    </button>
  );
}
```

### Full Wallet Access

Access the complete NEAR wallet functionality:

```ts title="wallet-usage.ts"
// Get wallet instance
const wallet = authClient.near.wallet;

// Send transactions
await wallet.sendTx({
  receiverId: "contract.near",
  actions: [
    (await wallet.actions).functionCall({
      methodName: "my_method",
      args: { key: "value" },
      gas: "30000000000000",
      deposit: "0"
    })
  ]
});

// Sign messages
const signature = await wallet.signMessage({
  message: "Hello NEAR!",
  recipient: "myapp.com"
});
```

## Configuration Options

### Server Options

The SIWN plugin accepts the following configuration options:

* **domain**: The domain name of your application (required)
* **getNonce**: Function to generate a unique nonce. Must return a `Promise<Uint8Array>`
* **validateNonce**: Custom nonce validation function. Optional, uses time-based validation by default
* **validateMessage**: Custom message validation function. Optional
* **validateRecipient**: Custom recipient validation function. Optional, uses domain by default
* **getMessage**: Custom message generation function. Optional
* **emailDomainName**: Email domain for user accounts. Optional, defaults to domain
* **anonymous**: Allow anonymous sign-ins. Default is `true`
* **getProfile**: Custom profile lookup. Optional, uses NEAR Social by default

### Minimal Configuration

```ts title="auth.ts"
import { betterAuth } from "better-auth";
import { siwn } from "better-near-auth";

export const auth = betterAuth({
  plugins: [
    siwn({
      domain: "myapp.com",
      getNonce: async () => crypto.randomBytes(32).toString('hex'),
    }),
  ],
});
```

### Full Configuration with Custom Validation

```ts title="auth-full.ts"
import { betterAuth } from "better-auth";
import { siwn } from "better-near-auth";

export const auth = betterAuth({
  plugins: [
    siwn({
      domain: "myapp.com",
      emailDomainName: "myapp.com",
      anonymous: false,
      requireFullAccessKey: true,
      
      // Custom nonce generation
      getNonce: async () => {
        return new Uint8Array(crypto.randomBytes(32).toString('hex'));
      },
      
      // Custom nonce validation
      validateNonce: (nonce: Uint8Array) => {
        // Custom validation logic
        return nonce.length === 32; // Example: ensure 32 bytes
      },
      
      // Custom message validation
      validateMessage: (message: string) => {
        return message.includes("Sign in to"); // Example validation
      },
      
      // Custom recipient validation
      validateRecipient: (recipient: string) => {
        const allowedDomains = ["myapp.com", "staging.myapp.com"];
        return allowedDomains.includes(recipient);
      },
      
      // Custom message generation
      getMessage: ({ accountId, recipient, nonce }) => {
        return `Sign in to ${recipient} with account ${accountId}`;
      },
      
      getProfile: async (accountId) => {
        // Custom profile lookup (optional)
        return {
          name: "Custom Name",
          image: { url: "https://example.com/avatar.png" }
        };
      },
    }),
  ],
});
```

## Schema

The SIWN plugin adds a `nearAccount` table to store user NEAR account associations:

| Field     | Type    | Description                               |
| --------- | ------- | ----------------------------------------- |
| id        | string  | Primary key                               |
| userId    | string  | Reference to user.id                      |
| accountId | string  | NEAR account ID                           |
| network   | string  | Network (mainnet or testnet)              |
| publicKey | string  | Associated public key                     |
| isPrimary | boolean | Whether this is the user's primary account|
| createdAt | date    | Creation timestamp                        |

## Manual Authentication Flow

For advanced use cases, you can use the low-level methods:

```ts title="manual-auth.ts"
// 1. Generate nonce
const { data: nonceData } = await authClient.near.nonce({
  accountId: "user.near",
});

// 2. Sign message with your wallet
const authToken = "base64_signed_message"; // From your wallet

// 3. Verify and authenticate
const { data, error } = await authClient.near.verify({
  authToken,
  accountId: "user.near",
  email: "user@example.com", // optional
});
```

## Advanced Features

### Function Call Keys

Allow function call keys instead of requiring full access keys:

```ts title="function-call-keys.ts"
siwn({
  domain: "myapp.com",
  requireFullAccessKey: false,
  
  validateFunctionCallKey: async ({ accountId, publicKey, contractId }) => {
    const allowedContracts = ["myapp.near", "social.near"];
    return contractId ? allowedContracts.includes(contractId) : true;
  },
  
  verifyMessage: async ({ authToken, expectedRecipient, accountId }) => {
    const { verify } = await import("near-sign-verify");
    const result = await verify(authToken, {
      expectedRecipient,
      requireFullAccessKey: false, // Important: match plugin setting
      nonceMaxAge: 15 * 60 * 1000,
    });
    return result.accountId === accountId;
  },
})
```

### Custom Profile Provider

```ts title="custom-profile.ts"
siwn({
  domain: "myapp.com",
  
  getProfile: async (accountId) => {
    try {
      // Try custom API first
      const response = await fetch(`https://api.myapp.com/profiles/${accountId}`);
      if (response.ok) {
        const profile = await response.json();
        return {
          name: profile.displayName,
          description: profile.bio,
          image: { url: profile.avatar },
        };
      }
    } catch (error) {
      console.error("Custom profile fetch failed:", error);
    }
    
    // Return null to use NEAR Social fallback
    return null;
  },
})
```

### Testing with KeyPairs

For testing without wallets:

```ts title="test-auth.ts"
import { KeyPair } from "@near-js/crypto";
import { sign } from "near-sign-verify";

// Generate test KeyPair
const keyPair = KeyPair.fromRandom('ed25519');
const accountId = "test.near";

// Get nonce
const { data: nonceData } = await authClient.near.nonce({ accountId });

// Sign with KeyPair
const authToken = await sign("Test login", {
  signer: keyPair.toString(),
  accountId,
  recipient: "myapp.com",
  nonce: new TextEncoder().encode(nonceData.nonce),
});

// Verify
const { data } = await authClient.near.verify({ authToken, accountId });
```

## Account ID Validation

The plugin automatically validates NEAR account IDs:

### Valid Examples
```typescript
"user.near"           // mainnet
"alice.testnet"       // testnet
"sub.account.near"    // mainnet with subdomain
"user-name.near"      // mainnet with hyphen
"user_name.near"      // mainnet with underscore
"alice.tg"            // mainnet with custom TLD
```

### Validation Rules
- Length: 2-64 characters
- Pattern: `^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$`
- Network detection: `.testnet` suffix = testnet, all others = mainnet

## Error Handling

### Common Error Codes
```typescript
"UNAUTHORIZED_INVALID_OR_EXPIRED_NONCE" // Nonce expired or invalid
"INVALID_NEAR_ACCOUNT_ID"               // Account ID format invalid
"NEAR_SIGNATURE_VERIFICATION_FAILED"    // Signature verification failed
"UNAUTHORIZED"                          // General authentication failure
```

### Error Response Format
```typescript
{
  error: string;
  message: string;
  status: number;
  code?: string;
}
```

## API Reference

### Client Methods

#### `authClient.signIn.near()`
One-line NEAR wallet authentication.

```typescript
const { data, error } = await authClient.signIn.near();
```

#### `authClient.near.wallet`
Access to complete FastINTEAR wallet functionality.

```typescript
const wallet = authClient.near.wallet;
await wallet.requestSignIn({ contractId: "myapp.com" });
```

#### `authClient.near.nonce(params)`
Generate a nonce for message signing.

```typescript
const { data, error } = await authClient.near.nonce({ 
  accountId: "user.near" 
});
```

#### `authClient.near.verify(params)`
Verify a signed message and authenticate the user.

```typescript
const { data, error } = await authClient.near.verify({
  authToken: "base64_signed_message",
  accountId: "user.near",
  email: "user@example.com" // optional
});
```

#### `authClient.near.getProfile(accountId?)`
Get user profile from NEAR Social or custom provider.

```typescript
const { data } = await authClient.near.getProfile("alice.near");
```

## Type Definitions

```typescript
export type AccountId = string; // Zod-validated NEAR account ID

export interface NearAccount {
  id: string;
  userId: string;
  accountId: string;
  network: "mainnet" | "testnet";
  publicKey: string;
  isPrimary: boolean;
  createdAt: Date;
}

export interface Profile {
  name?: string;
  description?: string;
  image?: { url?: string; ipfs_cid?: string };
  backgroundImage?: { url?: string; ipfs_cid?: string };
  linktree?: Record<string, string>;
}
```

## Security Considerations

### Nonce Management
- Generate cryptographically secure random nonces
- Store with expiration (recommended: 15 minutes)
- Delete after successful verification to prevent replay attacks

### Access Key Validation
- Default: require full access keys for production security
- Function call keys: validate against allowed contracts only
- Always match `requireFullAccessKey` setting between plugin and verification

### Domain Validation
- Always verify recipient matches your domain exactly
- Use HTTPS in production environments
- Implement rate limiting on authentication endpoints

## Dependencies

The plugin uses these key dependencies:

- `near-sign-verify`: For message verification (included internally)
- `fastintear`: For wallet integration (install separately)
